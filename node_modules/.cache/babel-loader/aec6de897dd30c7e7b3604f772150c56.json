{"ast":null,"code":"var _jsxFileName = \"/Users/mayankkumar/Downloads/usertable/src/components/UserRecordsData.js\";\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport './UserRecordsData.css';\nconst UserRecordsData = React.memo(props => {\n  const userState = useSelector(state => state.user);\n  const sortByField = userState.sortByField,\n        sortOrder = userState.sortOrder,\n        filterQuery = userState.filterQuery;\n  let users = props.users,\n      filterableFields = props.filterableFields;\n\n  if (filterQuery) {\n    users = users.filter(user => {});\n  }\n\n  if (sortByField) {\n    users = users.sort((u1, u2) => {\n      const u1Val = u1.data.find(field => field.id === sortByField).value;\n      const u2Val = u2.data.find(field => field.id === sortByField).value;\n\n      if (u1Val < u2Val) {\n        return sortOrder === 'ASC' ? -1 : 1;\n      }\n\n      if (u1Val > u2Val) {\n        return sortOrder === 'ASC' ? 1 : -1;\n      }\n\n      return 0;\n    });\n  }\n\n  return React.createElement(\"tbody\", {\n    className: \"user-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, users && users.map(user => {\n    return React.createElement(\"tr\", {\n      key: user.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, user.data && user.data.map(field => {\n      return React.createElement(\"td\", {\n        key: \"\".concat(user.id, \"-\").concat(field.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, field.value);\n    }));\n  }));\n});\nexport default UserRecordsData;","map":{"version":3,"sources":["/Users/mayankkumar/Downloads/usertable/src/components/UserRecordsData.js"],"names":["React","useSelector","UserRecordsData","memo","props","userState","state","user","sortByField","sortOrder","filterQuery","users","filterableFields","filter","sort","u1","u2","u1Val","data","find","field","id","value","u2Val","map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAO,uBAAP;AAEA,MAAMC,eAAe,GAAGF,KAAK,CAACG,IAAN,CAAWC,KAAK,IAAI;AAC1C,QAAMC,SAAS,GAAGJ,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAA7B;AAD0C,QAElCC,WAFkC,GAEMH,SAFN,CAElCG,WAFkC;AAAA,QAErBC,SAFqB,GAEMJ,SAFN,CAErBI,SAFqB;AAAA,QAEVC,WAFU,GAEML,SAFN,CAEVK,WAFU;AAAA,MAGpCC,KAHoC,GAGRP,KAHQ,CAGpCO,KAHoC;AAAA,MAG7BC,gBAH6B,GAGRR,KAHQ,CAG7BQ,gBAH6B;;AAI1C,MAAIF,WAAJ,EAAiB;AACfC,IAAAA,KAAK,GAAGA,KAAK,CAACE,MAAN,CAAaN,IAAI,IAAI,CAE5B,CAFO,CAAR;AAGD;;AACD,MAAIC,WAAJ,EAAiB;AACfG,IAAAA,KAAK,GAAGA,KAAK,CAACG,IAAN,CAAW,CAACC,EAAD,EAAKC,EAAL,KAAY;AAC7B,YAAMC,KAAK,GAAGF,EAAE,CAACG,IAAH,CAAQC,IAAR,CAAaC,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAab,WAAnC,EAAgDc,KAA9D;AACA,YAAMC,KAAK,GAAGP,EAAE,CAACE,IAAH,CAAQC,IAAR,CAAaC,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAab,WAAnC,EAAgDc,KAA9D;;AACA,UAAIL,KAAK,GAAGM,KAAZ,EAAmB;AACjB,eAAOd,SAAS,KAAK,KAAd,GAAsB,CAAC,CAAvB,GAA2B,CAAlC;AACD;;AACD,UAAIQ,KAAK,GAAGM,KAAZ,EAAmB;AACjB,eAAOd,SAAS,KAAK,KAAd,GAAsB,CAAtB,GAA0B,CAAC,CAAlC;AACD;;AACD,aAAO,CAAP;AACD,KAVO,CAAR;AAWD;;AACD,SACE;AAAO,IAAA,SAAS,EAAC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,KAAK,IACJA,KAAK,CAACa,GAAN,CAAUjB,IAAI,IAAI;AAChB,WACE;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACc,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGd,IAAI,CAACW,IAAL,IACCX,IAAI,CAACW,IAAL,CAAUM,GAAV,CAAcJ,KAAK,IAAI;AACrB,aAAO;AAAI,QAAA,GAAG,YAAKb,IAAI,CAACc,EAAV,cAAgBD,KAAK,CAACC,EAAtB,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoCD,KAAK,CAACE,KAA1C,CAAP;AACD,KAFD,CAFJ,CADF;AAQD,GATD,CAFJ,CADF;AAeD,CArCuB,CAAxB;AAuCA,eAAepB,eAAf","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './UserRecordsData.css';\n\nconst UserRecordsData = React.memo(props => {\n  const userState = useSelector(state => state.user);\n  const { sortByField, sortOrder, filterQuery } = userState;\n  let { users, filterableFields } = props;\n  if (filterQuery) {\n    users = users.filter(user => {\n\n    });\n  }\n  if (sortByField) {\n    users = users.sort((u1, u2) => {\n      const u1Val = u1.data.find(field => field.id === sortByField).value;\n      const u2Val = u2.data.find(field => field.id === sortByField).value;\n      if (u1Val < u2Val) {\n        return sortOrder === 'ASC' ? -1 : 1;\n      }\n      if (u1Val > u2Val) {\n        return sortOrder === 'ASC' ? 1 : -1;\n      }\n      return 0;\n    });\n  }\n  return (\n    <tbody className=\"user-list\">\n      {users &&\n        users.map(user => {\n          return (\n            <tr key={user.id}>\n              {user.data &&\n                user.data.map(field => {\n                  return <td key={`${user.id}-${field.id}`}>{field.value}</td>;\n                })}\n            </tr>\n          );\n        })}\n    </tbody>\n  );\n});\n\nexport default UserRecordsData;\n"]},"metadata":{},"sourceType":"module"}